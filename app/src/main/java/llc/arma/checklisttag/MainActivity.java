package llc.arma.checklisttag;import static android.app.PendingIntent.FLAG_MUTABLE;import static android.view.View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION;import android.app.PendingIntent;import android.content.Context;import android.content.Intent;import android.content.IntentFilter;import android.nfc.NdefMessage;import android.nfc.NdefRecord;import android.nfc.NfcAdapter;import android.nfc.NfcManager;import android.nfc.Tag;import android.nfc.tech.Ndef;import android.nfc.tech.NdefFormatable;import android.nfc.tech.NfcA;import android.os.Build;import android.os.Bundle;import android.os.Parcelable;import android.util.Log;import android.view.View;import androidx.annotation.NonNull;import androidx.appcompat.app.AppCompatActivity;import androidx.databinding.DataBindingUtil;import androidx.fragment.app.FragmentResultListener;import androidx.lifecycle.ViewModelProvider;import androidx.navigation.NavDestination;import androidx.navigation.Navigation;import androidx.work.BackoffPolicy;import androidx.work.Constraints;import androidx.work.ExistingWorkPolicy;import androidx.work.NetworkType;import androidx.work.OneTimeWorkRequest;import androidx.work.WorkManager;import com.google.android.material.snackbar.Snackbar;import org.jetbrains.annotations.NotNull;import java.nio.charset.StandardCharsets;import java.util.Objects;import java.util.concurrent.TimeUnit;import llc.arma.checklisttag.databinding.ActivityMainBinding;import llc.arma.checklisttag.repo.SendWorker;public class MainActivity extends AppCompatActivity implements FragmentResultListener {    ActivityMainBinding binding;    MainViewModel viewModel;    NfcAdapter nfcAdapter;    IntentFilter ndef;    String[][] techListsArray;    IntentFilter[] intentFiltersArray;    PendingIntent pendingIntent;    @Override    protected void onResume() {        super.onResume();        nfcAdapter.enableForegroundDispatch(this, pendingIntent, intentFiltersArray, techListsArray);    }    @Override    protected void onPause() {        super.onPause();        nfcAdapter.disableForegroundDispatch(this);    }    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {            pendingIntent = PendingIntent.getActivity(                    this, 0, new Intent(this, getClass()).addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP), FLAG_MUTABLE);        } else {            pendingIntent = PendingIntent.getActivity(                    this, 0, new Intent(this, getClass()).addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP), 0);        }        nfcAdapter = ((NfcManager) getSystemService(Context.NFC_SERVICE)).getDefaultAdapter();        techListsArray = new String[][] { new String[] { NfcA.class.getName() } };        ndef = new IntentFilter(NfcAdapter.ACTION_NDEF_DISCOVERED);        try {            ndef.addDataType("*/*");        }        catch (IntentFilter.MalformedMimeTypeException e) {            throw new RuntimeException("fail", e);        }        intentFiltersArray = new IntentFilter[] {ndef, };        viewModel = new ViewModelProvider(this).get(MainViewModel.class);        binding = DataBindingUtil.setContentView(this, R.layout.activity_main);        binding.getRoot().setSystemUiVisibility(                View.SYSTEM_UI_FLAG_LAYOUT_STABLE | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN                        | SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION);        viewModel.getShowMainEvent().observe(this, event -> {            if(event.isHandled()){                Navigation.findNavController(this, R.id.mainContainer)                        .navigate(R.id.action_loginFragment_to_tagsFragment);            }        });        getSupportFragmentManager().setFragmentResultListener("write", this, this);        App.getAppComponent().provideLocalRepo().getNotSyncedLiveData().observe(this, tags -> {            if(tags.size() > 0){                Constraints constraints = new Constraints.Builder()                        .setRequiredNetworkType(NetworkType.CONNECTED)                        .build();                OneTimeWorkRequest oneTimeWorkRequest = new OneTimeWorkRequest                        .Builder(SendWorker.class)                        .setConstraints(constraints)                        .setBackoffCriteria(BackoffPolicy.LINEAR, 1, TimeUnit.MINUTES)                        .build();                WorkManager.getInstance(App.getAppComponent().provideContext())                        .beginUniqueWork("OBJECT_SEND",                                ExistingWorkPolicy.KEEP, oneTimeWorkRequest).enqueue();            }        });    }    @Override    protected void onNewIntent(Intent intent) {        super.onNewIntent(intent);        setIntent(intent);        NavDestination navDestination = Navigation.findNavController(this, R.id.mainContainer).getCurrentDestination();        if (navDestination != null) {            if (NfcAdapter.ACTION_NDEF_DISCOVERED.equals(intent.getAction())) {                if (navDestination.getId() == R.id.tagsFragment) {                    Bundle bundle = new Bundle();                    bundle.putString("nfcId", readNfcId(intent));                    getSupportFragmentManager().setFragmentResult("nfcRead", bundle);                } else {                    if (navDestination.getId() == R.id.scanFragment) {                        Bundle bundle = new Bundle();                        bundle.putString("nfcId", readNfcId(intent));                        getSupportFragmentManager().setFragmentResult("scan", bundle);                    }else {                        if (navDestination.getId() == R.id.writeFragment) {                            getSupportFragmentManager().setFragmentResult("writeNfc", new Bundle());                        } else {                            Snackbar.make(binding.getRoot(), "Метка не прошита", Snackbar.LENGTH_LONG).show();                        }                    }                }            } else {                if(NfcAdapter.ACTION_TECH_DISCOVERED.equals(intent.getAction()) || NfcAdapter.ACTION_TAG_DISCOVERED.equals(intent.getAction())) {                    if (navDestination.getId() == R.id.writeFragment) {                        getSupportFragmentManager().setFragmentResult("writeNfc", new Bundle());                    } else {                        Snackbar.make(binding.getRoot(), "Метка не прошита", Snackbar.LENGTH_LONG).show();                    }                }            }        }    }    public String readNfcId(Intent intent){        if(intent != null){            try {                if (NfcAdapter.ACTION_NDEF_DISCOVERED.equals(intent.getAction())) {                    Parcelable[] messages = intent.getParcelableArrayExtra(NfcAdapter.EXTRA_NDEF_MESSAGES);                    if (messages != null) {                        byte[] tagId = intent.getByteArrayExtra(NfcAdapter.EXTRA_ID);                        return ByteArrayToHexString(Objects.requireNonNull(tagId));                    }                }            }catch (Exception e) {                e.printStackTrace();            }        }        return null;    }    String ByteArrayToHexString(@NotNull byte [] inarray) {        int i, j, in;        String [] hex = {"0","1","2","3","4","5","6","7","8","9","A","B","C","D","E","F"};        StringBuilder out= new StringBuilder();        for(j = 0 ; j < inarray.length ; ++j)        {            in = (int) inarray[j] & 0xff;            i = (in >> 4) & 0x0f;            out.append(hex[i]);            i = in & 0x0f;            out.append(hex[i]);        }        return out.toString();    }    public void writeTag(Tag tag, NdefMessage message)  {        if (tag != null) {            try {                Ndef ndefTag = Ndef.get(tag);                if (ndefTag == null) {                    // Let's try to format the Tag in NDEF                    NdefFormatable nForm = NdefFormatable.get(tag);                    if (nForm != null) {                        nForm.connect();                        nForm.format(message);                        nForm.close();                    }                }                else {                    ndefTag.connect();                    ndefTag.writeNdefMessage(message);                    ndefTag.close();                }            }            catch(Exception e) {                e.printStackTrace();            }        }    }    @Override    public void onFragmentResult(@NonNull String requestKey, @NonNull Bundle result) {        Tag tag = getIntent().getParcelableExtra(NfcAdapter.EXTRA_TAG);        NdefMessage msg = new NdefMessage(                new NdefRecord[] {NdefRecord.createMime("application/llc.arma.cheklist",                        "4eklist".getBytes(StandardCharsets.US_ASCII))});        writeTag(tag, msg);    }}