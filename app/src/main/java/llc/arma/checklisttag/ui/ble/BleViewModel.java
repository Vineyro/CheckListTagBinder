package llc.arma.checklisttag.ui.ble;import android.Manifest;import android.bluetooth.BluetoothAdapter;import android.bluetooth.le.BluetoothLeScanner;import android.bluetooth.le.ScanCallback;import android.bluetooth.le.ScanFilter;import android.bluetooth.le.ScanResult;import android.bluetooth.le.ScanSettings;import android.content.pm.PackageManager;import android.os.Build;import android.os.Bundle;import android.os.ParcelUuid;import androidx.core.app.ActivityCompat;import androidx.lifecycle.LiveData;import androidx.lifecycle.MutableLiveData;import androidx.lifecycle.ViewModel;import org.jetbrains.annotations.NotNull;import java.util.ArrayList;import java.util.Comparator;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.UUID;import java.util.concurrent.Executors;import llc.arma.checklisttag.App;import llc.arma.checklisttag.Event;import llc.arma.checklisttag.data.Ble;import llc.arma.checklisttag.data.Tag;public class BleViewModel extends ViewModel {    private String sid;    private long lastTime = 0;    private final Map<String, Ble> bleMap = new HashMap<>();    private final MutableLiveData<List<Ble>> bleList = new MutableLiveData<>();    private final MutableLiveData<Event> closeEvent = new MutableLiveData<>();    public LiveData<Event> getCloseEvent() {        return closeEvent;    }    public LiveData<List<Ble>> getBleList() {        return bleList;    }    public void start(String sid) {        this.sid = sid;        BluetoothAdapter adapter = BluetoothAdapter.getDefaultAdapter();        BluetoothLeScanner scanner = adapter.getBluetoothLeScanner();        ScanCallback scanCallback = new ScanCallback() {            @Override            public void onScanResult(int callbackType, ScanResult result) {                super.onScanResult(callbackType, result);                if (Build.VERSION.SDK_INT < Build.VERSION_CODES.S || ActivityCompat.checkSelfPermission(                        App.getAppComponent().provideContext(),                        Manifest.permission.BLUETOOTH_CONNECT                ) == PackageManager.PERMISSION_GRANTED) {                    if (result.getDevice().getName() != null && result.getDevice().getName().toLowerCase().contains("arma")) {                        Ble ble = new Ble(result.getDevice().getName(), result.getDevice().getAddress(), result.getRssi());                        bleMap.put(ble.getId(), ble);                        postList();                    }                }            }            @Override            public void onBatchScanResults(List<ScanResult> results) {                super.onBatchScanResults(results);            }            @Override            public void onScanFailed(int errorCode) {                super.onScanFailed(errorCode);            }        };        ScanSettings scanSettings = new ScanSettings.Builder()                .setScanMode(ScanSettings.SCAN_MODE_BALANCED)                .setCallbackType(ScanSettings.CALLBACK_TYPE_ALL_MATCHES)                .setMatchMode(ScanSettings.MATCH_MODE_AGGRESSIVE)                .setNumOfMatches(ScanSettings.MATCH_NUM_ONE_ADVERTISEMENT)                .setReportDelay(0L)                .build();        ScanFilter.Builder filter = new ScanFilter.Builder();        Executors.newSingleThreadExecutor().execute(() -> {            Tag tag = App.getAppComponent().provideLocalRepo().getBleTagBySid(sid);            if (tag.getBleType() == 1) {                //filter.setServiceUuid(new ParcelUuid(UUID.fromString("a77db03a-9bc4-11ed-a8fc-0242ac120002")), ParcelUuid.fromString("a77db03a-9bc4-11ed-a8fc-0242ac120002"));            }            if (scanner != null) {                if (Build.VERSION.SDK_INT < Build.VERSION_CODES.S || ActivityCompat.checkSelfPermission(                        App.getAppComponent().provideContext(),                        Manifest.permission.BLUETOOTH_SCAN                    ) == PackageManager.PERMISSION_GRANTED                ) {                    scanner.startScan(null, scanSettings, scanCallback);                }            }        });    }    public BleViewModel() {    }    public void postList(){        if(System.currentTimeMillis() - lastTime > 2000){            List<Ble> bleList = new ArrayList<>();            for(Map.Entry<String, Ble> ble : bleMap.entrySet()){                bleList.add(ble.getValue());            }            bleList.sort(Comparator.comparing(Ble::getId));            this.bleList.postValue(bleList);            lastTime = System.currentTimeMillis();        }    }    public void onBleClicked(@NotNull Ble ble){        Bundle bundle = new Bundle();        bundle.putString("sid", sid);        bundle.putString("bleSelectResult", ble.getId());        closeEvent.postValue(new Event(bundle));    }}