package llc.arma.checklisttag.ui.ble;import android.bluetooth.BluetoothAdapter;import android.bluetooth.le.BluetoothLeScanner;import android.bluetooth.le.ScanCallback;import android.bluetooth.le.ScanResult;import android.bluetooth.le.ScanSettings;import android.os.Bundle;import org.jetbrains.annotations.NotNull;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import androidx.lifecycle.LiveData;import androidx.lifecycle.MutableLiveData;import androidx.lifecycle.ViewModel;import llc.arma.checklisttag.Event;import llc.arma.checklisttag.data.Ble;public class BleViewModel extends ViewModel {    private String sid;    private long lastTime = 0;    private final Map<String, Ble> bleMap = new HashMap<>();    private final MutableLiveData<List<Ble>> bleList = new MutableLiveData<>();    private final MutableLiveData<Event> closeEvent = new MutableLiveData<>();    public LiveData<Event> getCloseEvent() {        return closeEvent;    }    public LiveData<List<Ble>> getBleList() {        return bleList;    }    public void start(String sid){        this.sid = sid;    }    public BleViewModel(){        BluetoothAdapter adapter = BluetoothAdapter.getDefaultAdapter();        BluetoothLeScanner scanner = adapter.getBluetoothLeScanner();        ScanCallback scanCallback = new ScanCallback() {            @Override            public void onScanResult(int callbackType, ScanResult result) {                super.onScanResult(callbackType, result);                Ble ble = new Ble(result.getDevice().getName(), result.getDevice().getAddress(), result.getRssi());                bleMap.put(ble.getId(), new Ble(result.getDevice().getName(), result.getDevice().getAddress(), result.getRssi()));                postList();            }            @Override            public void onBatchScanResults(List<ScanResult> results) {                super.onBatchScanResults(results);            }            @Override            public void onScanFailed(int errorCode) {                super.onScanFailed(errorCode);            }        };        ScanSettings scanSettings = new ScanSettings.Builder()                .setScanMode(ScanSettings.SCAN_MODE_BALANCED)                .setCallbackType(ScanSettings.CALLBACK_TYPE_ALL_MATCHES)                .setMatchMode(ScanSettings.MATCH_MODE_AGGRESSIVE)                .setNumOfMatches(ScanSettings.MATCH_NUM_ONE_ADVERTISEMENT)                .setReportDelay(0L)                .build();        if (scanner != null) {            scanner.startScan(null, scanSettings, scanCallback);        }    }    public void postList(){        if(System.currentTimeMillis() - lastTime > 2000){            List<Ble> bleList = new ArrayList<>();            for(Map.Entry<String, Ble> ble : bleMap.entrySet()){                bleList.add(ble.getValue());            }            bleList.sort((o1, o2) -> o1.getId().compareTo(o2.getId()));            this.bleList.postValue(bleList);            lastTime = System.currentTimeMillis();        }    }    public void onBleClicked(@NotNull Ble ble){        Bundle bundle = new Bundle();        bundle.putString("sid", sid);        bundle.putString("bleSelectResult", ble.getId());        closeEvent.postValue(new Event(bundle));    }}