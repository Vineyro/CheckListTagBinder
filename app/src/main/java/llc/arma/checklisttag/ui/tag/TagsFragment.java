package llc.arma.checklisttag.ui.tag;import android.content.Context;import android.os.Bundle;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.Toast;import androidx.annotation.NonNull;import androidx.annotation.Nullable;import androidx.databinding.DataBindingUtil;import androidx.fragment.app.Fragment;import androidx.fragment.app.FragmentResultListener;import androidx.lifecycle.ViewModelProvider;import androidx.navigation.Navigation;import androidx.viewpager2.widget.ViewPager2;import com.google.android.material.snackbar.Snackbar;import com.google.android.material.tabs.TabLayoutMediator;import llc.arma.checklisttag.R;import llc.arma.checklisttag.databinding.TagsFragmentBinding;public class TagsFragment extends Fragment implements FragmentResultListener {    private TagsFragmentBinding binding;    private TagsViewModel viewModel;    private TagPager adapter;    @Override    public void onCreate(@Nullable Bundle savedInstanceState) {        super.onCreate(savedInstanceState);    }    @Nullable    @Override    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container,                             @Nullable Bundle savedInstanceState) {        binding = DataBindingUtil.inflate(inflater, R.layout.tags_fragment, container,                false);        binding.setLifecycleOwner(getViewLifecycleOwner());        binding.setModel(viewModel);        return binding.getRoot();    }    @Override    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {        super.onViewCreated(view, savedInstanceState);        binding.getRoot().setOnApplyWindowInsetsListener((v, insets) -> {            binding.getRoot().setPadding(insets.getSystemWindowInsetLeft(),                    insets.getSystemWindowInsetTop(),                    insets.getSystemWindowInsetRight(),                    insets.getSystemWindowInsetBottom());            return insets;        });        adapter = new TagPager(getChildFragmentManager(), getLifecycle());        binding.tagPager.setOffscreenPageLimit(2);        binding.tagPager.setAdapter(adapter);        binding.tagPager.setOrientation(ViewPager2.ORIENTATION_HORIZONTAL);        new TabLayoutMediator(binding.tabLayout, binding.tagPager, (tab, position) -> {            switch (position){                case 0: tab.setText("NFC"); break;                case 1: tab.setText("BLE"); break;            }        }).attach();        viewModel.getShowLoginEvent().observe(getViewLifecycleOwner(), event -> {            if(event.isHandled()){                Navigation.findNavController(requireActivity(), R.id.mainContainer)                        .navigate(R.id.action_tagsFragment_to_loginFragment2);            }        });        viewModel.getShowWriteEvent().observe(getViewLifecycleOwner(), event -> {            if(event.isHandled()){                Navigation.findNavController(requireActivity(), R.id.mainContainer)                        .navigate(R.id.action_tagsFragment_to_writeFragment);            }        });        viewModel.getShowAddNfcDialogEvent().observe(getViewLifecycleOwner(), event -> {            if(event.isHandled()){                Navigation.findNavController(requireActivity(), R.id.mainContainer)                        .navigate(R.id.action_tagsFragment_to_addNfcObjectDialog, event.getContent());            }        });        viewModel.getShowNfcExistWarningEvent().observe(getViewLifecycleOwner(), event ->                Snackbar.make(binding.getRoot(), "Метка уже есть", Snackbar.LENGTH_LONG).show());        viewModel.getLoadResult().observe(getViewLifecycleOwner(), aBoolean -> {            if(aBoolean){                Toast.makeText(requireContext(), "Success", Toast.LENGTH_SHORT).show();            }        });        requireActivity().getSupportFragmentManager()                .setFragmentResultListener("bleSelectResult", getViewLifecycleOwner(), this);        requireActivity().getSupportFragmentManager()                .setFragmentResultListener("nfcScan", getViewLifecycleOwner(), this);        requireActivity().getSupportFragmentManager()                .setFragmentResultListener("nfcRead", getViewLifecycleOwner(), this);    }    @Override    public void onAttach(@NonNull Context context) {        super.onAttach(context);        viewModel = new ViewModelProvider(requireActivity()).get(TagsViewModel.class);    }    @Override    public void onFragmentResult(@NonNull String requestKey, @NonNull Bundle result) {        switch (requestKey){            case "bleSelectResult":                viewModel.onTagScanned(result.getString("sid"), result.getString("bleSelectResult"));                break;            case "nfcScan":                viewModel.onTagScanned(result.getString("sid"), result.getString("nfcId"));                break;            case "nfcRead":                viewModel.onNfcScanned(result.getString("nfcId"));        }    }}