package llc.arma.checklisttag.db.dao;import androidx.lifecycle.LiveData;import androidx.paging.DataSource;import androidx.room.Dao;import androidx.room.Insert;import androidx.room.OnConflictStrategy;import androidx.room.Query;import androidx.room.Transaction;import java.util.List;import llc.arma.checklisttag.db.entity.Object;import llc.arma.checklisttag.db.entity.ObjectEntity;import llc.arma.checklisttag.db.entity.Value;@Daopublic abstract class ObjectDao {    @Transaction    @Query("SELECT * FROM object WHERE type IN (:types) ORDER BY ts ASC")    public abstract DataSource.Factory<Integer, ObjectEntity> getAll(String... types);    @Query("SELECT * FROM object WHERE type IN (:types) ORDER BY name ASC")    public abstract List<ObjectEntity> getAllByType(String... types);    @Transaction    @Query("SELECT * FROM object WHERE sync = 2")    public abstract List<ObjectEntity> getNotSynced();    @Transaction    @Query("SELECT * FROM object WHERE sync = 0")    public abstract List<ObjectEntity> getSynced();    @Transaction    @Query("SELECT * FROM object WHERE sync = 2")    public abstract LiveData<List<ObjectEntity>> getNotSyncedLiveData();    @Transaction    @Query("SELECT * FROM object WHERE sid =:sid")    public abstract ObjectEntity getBySid(String sid);    @Transaction    @Insert(onConflict = OnConflictStrategy.REPLACE)    public void insert(ObjectEntity object){        insert(object.getObject());        insert(object.getData());    }    @Insert(onConflict = OnConflictStrategy.REPLACE)    public abstract void insert(Object object);    @Insert(onConflict = OnConflictStrategy.REPLACE)    public abstract void insert(List<Value> object);    @Query("DELETE FROM object WHERE sid = :sid")    public abstract void deleteObject(String sid);    @Query("DELETE FROM value WHERE sid = :sid")    public abstract void deleteValue(String sid);    public void deleteSynced(){        for(ObjectEntity objectEntity : getSynced()){            deleteObject(objectEntity.getSid());            deleteValue(objectEntity.getSid());        }    }}